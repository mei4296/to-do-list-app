{"version":3,"sources":["features/todos/todoSlice.js","App.js","store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todos","reducers","addTodo","state","action","push","payload","editTodo","id","text","existingTodo","find","todo","deleteTodo","filter","actions","selectTodos","App","todoText","setTodoText","useState","editMode","setEditMode","editTodoId","setEditTodoId","dispatch","useDispatch","useSelector","React","createElement","className","type","value","onChange","e","target","placeholder","onClick","handleSaveEdit","trim","handleAddTodo","newTodo","Date","now","map","key","handleEditTodo","handleDeleteTodo","store","configureStore","reducer","todoReducer","ReactDOM","render","Provider","document","getElementById"],"mappings":"mNAGA,MAIMA,EAAYC,YAAY,CAC5BC,KAAM,QACNC,aANmB,CACnBC,MAAO,IAMPC,SAAU,CACRC,QAASA,CAACC,EAAOC,KACfD,EAAMH,MAAMK,KAAKD,EAAOE,UAE1BC,SAAUA,CAACJ,EAAOC,KAChB,MAAMI,GAAEA,EAAEC,KAAEA,GAASL,EAAOE,QACtBI,EAAeP,EAAMH,MAAMW,KAAMC,GAASA,EAAKJ,KAAOA,GACxDE,IACFA,EAAaD,KAAOA,IAGxBI,WAAYA,CAACV,EAAOC,KAClBD,EAAMH,MAAQG,EAAMH,MAAMc,OAAQF,GAASA,EAAKJ,KAAOJ,EAAOE,cAMvDJ,QAAEA,EAAOK,SAAEA,EAAQM,WAAEA,GAAejB,EAAUmB,QAC9CC,EAAeb,GAAUA,EAAMH,MAAMA,MACnCJ,QAAiB,QC6CjBqB,MAtEHA,KACV,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAUC,GAAeF,oBAAS,IAClCG,EAAYC,GAAiBJ,mBAAS,MAGvCK,EAAWC,cAGX1B,EAAQ2B,YAAYX,GAkC1B,OACEY,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,cAEJD,IAAAC,cAAA,SACEE,KAAK,OACLC,MAAOd,EACPe,SAAWC,GAAMf,EAAYe,EAAEC,OAAOH,OACtCI,YAAY,eAEdR,IAAAC,cAAA,UAAQQ,QAAShB,EAxBEiB,KACjBpB,EAASqB,SACXd,EAASlB,EAAS,CAAEC,GAAIe,EAAYd,KAAMS,EAASqB,UACnDpB,EAAY,IACZG,GAAY,GACZE,EAAc,QAtBIgB,KACpB,GAAItB,EAASqB,OAAQ,CACnB,MAAME,EAAU,CAAEjC,GAAIkC,KAAKC,MAAOlC,KAAMS,EAASqB,QACjDd,EAASvB,EAAQuC,IACjBtB,EAAY,OAsCTE,EAAW,eAAiB,YAG/BO,IAAAC,cAAA,UACG7B,EAAM4C,IAAKhC,GACVgB,IAAAC,cAAA,MAAIgB,IAAKjC,EAAKJ,IACXI,EAAKH,KACNmB,IAAAC,cAAA,UAAQQ,QAASA,IAxCH7B,KACtB,MAAMI,EAAOZ,EAAMW,KAAMC,GAASA,EAAKJ,KAAOA,GAC9CW,EAAYP,EAAKH,MACjBa,GAAY,GACZE,EAAchB,IAoCiBsC,CAAelC,EAAKJ,KAAK,QAChDoB,IAAAC,cAAA,UAAQQ,QAASA,IAvBD7B,KACxBiB,EAASZ,EAAWL,KAsBWuC,CAAiBnC,EAAKJ,KAAK,eCzD/CwC,MANDC,YAAe,CAC3BC,QAAS,CACPlD,MAAOmD,KCEXC,IAASC,OACPzB,IAAAC,cAACyB,IAAQ,CAACN,MAAOA,GACfpB,IAAAC,cAACZ,EAAG,OAENsC,SAASC,eAAe","file":"static/js/main.c73e9dc3.chunk.js","sourcesContent":["// src/features/todos/todoSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  todos: [],\n};\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      state.todos.push(action.payload);\n    },\n    editTodo: (state, action) => {\n      const { id, text } = action.payload;\n      const existingTodo = state.todos.find((todo) => todo.id === id);\n      if (existingTodo) {\n        existingTodo.text = text;\n      }\n    },\n    deleteTodo: (state, action) => {\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\n    },\n  },\n});\n\n// Exporting the actions and selector\nexport const { addTodo, editTodo, deleteTodo } = todoSlice.actions;\nexport const selectTodos = (state) => state.todos.todos;\nexport default todoSlice.reducer;\n","// src/App.js\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTodo, editTodo, deleteTodo, selectTodos } from './features/todos/todoSlice';\n\nconst App = () => {\n  const [todoText, setTodoText] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const [editTodoId, setEditTodoId] = useState(null);\n\n  // Use the `useDispatch` hook to dispatch actions\n  const dispatch = useDispatch();\n\n  // Use `useSelector` hook to get the list of todos from Redux store\n  const todos = useSelector(selectTodos);\n\n  // Add new to-do\n  const handleAddTodo = () => {\n    if (todoText.trim()) {\n      const newTodo = { id: Date.now(), text: todoText.trim() };\n      dispatch(addTodo(newTodo));\n      setTodoText('');\n    }\n  };\n\n  // Edit an existing to-do\n  const handleEditTodo = (id) => {\n    const todo = todos.find((todo) => todo.id === id);\n    setTodoText(todo.text);\n    setEditMode(true);\n    setEditTodoId(id);\n  };\n\n  // Save edited to-do\n  const handleSaveEdit = () => {\n    if (todoText.trim()) {\n      dispatch(editTodo({ id: editTodoId, text: todoText.trim() }));\n      setTodoText('');\n      setEditMode(false);\n      setEditTodoId(null);\n    }\n  };\n\n  // Delete to-do\n  const handleDeleteTodo = (id) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>To-Do List</h1>\n\n      <input\n        type=\"text\"\n        value={todoText}\n        onChange={(e) => setTodoText(e.target.value)}\n        placeholder=\"Enter task\"\n      />\n      <button onClick={editMode ? handleSaveEdit : handleAddTodo}>\n        {editMode ? 'Save Changes' : 'Add Task'}\n      </button>\n\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            {todo.text}\n            <button onClick={() => handleEditTodo(todo.id)}>Edit</button>\n            <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","// src/store.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './features/todos/todoSlice';\n\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n});\n\nexport default store;\n","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}